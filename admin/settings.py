"""
Django settings for admin project.

Generated by 'django-admin startproject' using Django 4.2.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""

from pathlib import Path
import os

# print(os.environ.get('SECRET_KEY'))
# print(os.environ.get('JWT_SECRET'))
# print(os.environ.get('MYSQL_DATABASE'))
# print(os.environ.get('MYSQL_USER'))
# print(os.environ.get('MYSQL_PASSWORD'))
# print(os.environ.get('MYSQL_ROOT_PASSWORD'))


def get_secret_value(key):
    k_path = os.environ.get(key, '')
    # print('@@@ @@@ @@@ path to ', key, ' = ', k_path)
    try:
        with open(k_path, 'r') as f:
            value = f.read().strip()
            # print('### ### ### value =', value)
            return value
    except:
        return None


# # Read the contents of the secret files
# with open('/run/secrets/django_key', 'r') as f:
#     django_key = f.read().strip()

# with open('/run/secrets/jwt_key', 'r') as f:
#     jwt_key = f.read().strip()

# with open('/run/secrets/mysql_db', 'r') as f:
#     mysql_db = f.read().strip()

# with open('/run/secrets/mysql_user', 'r') as f:
#     mysql_user = f.read().strip()

# with open('/run/secrets/mysql_password', 'r') as f:
#     mysql_password = f.read().strip()

# with open('/run/secrets/mysql_root_password', 'r') as f:
#     mysql_root_password = f.read().strip()


# print('@@@ @@@ @@@, django_key:', django_key)
# print('@@@ @@@ @@@, jwt_key:', jwt_key)
# print('@@@ @@@ @@@, mysql_db:', mysql_db)
# print('@@@ @@@ @@@, mysql_user:', mysql_user)
# print('@@@ @@@ @@@, mysql_password:', mysql_password)
# print('@@@ @@@ @@@, mysql_root_password:', mysql_root_password)


# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
# <-- Put this in an Environment variable
SECRET_KEY = get_secret_value('SECRET_KEY')
JWT_SECRET = get_secret_value('JWT_SECRET')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'rest_framework',
    'users',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'admin.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'admin.wsgi.application'


# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

DATABASES = {  # has to match the database i ask my docker compose to build.
    'default': {
        'ENGINE': 'django.db.backends.mysql',  # the image is mysql.
        'NAME': get_secret_value('MYSQL_DATABASE'),  # MYSQL_DATABASE.
        'USER': get_secret_value('MYSQL_USER'),  # MYSQL_USER.
        'PASSWORD': get_secret_value('MYSQL_PASSWORD'),  # MYSQL_PASSWORD.
        'HOST': 'admin_db',  # database service name.
        'PORT': '3306'  # default port of my sql.
    }
}


# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Custom authentication of 'users, enables me to log with an email.'
# https://docs.djangoproject.com/en/4.2/topics/auth/customizing/ <-- Substituting a custom User model
AUTH_USER_MODEL = 'users.Users'
